NestedBlockDepth - 4/3 - [procedure] - Line/Column=(23,2) - Path=detekt-rules/src/main/kotlin/io/gitlab/arturbosch/detekt/rules/OptionalSemicolon.kt - Signature=OptionalSemicolon.kt$OptionalSemicolon$override fun procedure(node: ASTNode)
NestedBlockDepth - 4/3 - [procedure] - Line/Column=(20,2) - Path=detekt-rules/src/main/kotlin/io/gitlab/arturbosch/detekt/rules/formatting/Indentation.kt - Signature=Indentation.kt$Indentation$override fun procedure(node: ASTNode)
EmptyFunctionBlock - [postVisit] - Line/Column=(94,45) - Path=detekt-api/src/main/kotlin/io/gitlab/arturbosch/detekt/api/Rule.kt - Signature=Rule.kt$Rule${ }
EmptyFunctionBlock - [preVisit] - Line/Column=(101,44) - Path=detekt-api/src/main/kotlin/io/gitlab/arturbosch/detekt/api/Rule.kt - Signature=Rule.kt$Rule${ }
CatchRuntimeException - [e] - Line/Column=(32,11) - Path=detekt-api/src/main/kotlin/io/gitlab/arturbosch/detekt/api/Junk.kt - Signature=Junk.kt$e: RuntimeException
NoElseInWhenExpression - [<anonymous>] - Line/Column=(26,5) - Path=detekt-rules/src/main/kotlin/io/gitlab/arturbosch/detekt/rules/bugs/ExplicitGarbageCollectionCall.kt - Signature=ExplicitGarbageCollectionCall.kt$ExplicitGarbageCollectionCall$when (it.text) { "System", "Runtime.getRuntime()" -> addFindings(CodeSmell(id, Entity.Companion.from(expression))) }
NoElseInWhenExpression - [procedure] - Line/Column=(47,4) - Path=detekt-rules/src/main/kotlin/io/gitlab/arturbosch/detekt/rules/formatting/SpacingAroundCurlyBraces.kt - Signature=SpacingAroundCurlyBraces.kt$SpacingAroundCurlyBraces$when { !spacingBefore && !spacingAfter -> { if (debug) addFindings(CodeSmell(id, Entity.from(node), "Missing spacing around \"${node.text}\"")) withAutoCorrect { node.rawInsertBeforeMe(PsiWhiteSpaceImpl(" ")) node.rawInsertAfterMe(PsiWhiteSpaceImpl(" ")) } } !spacingBefore -> { if (debug) addFindings(CodeSmell(id, Entity.from(node), "Missing spacing before \"${node.text}\"")) withAutoCorrect { node.rawInsertBeforeMe(PsiWhiteSpaceImpl(" ")) } } !spacingAfter -> { if (debug) addFindings(CodeSmell(id, Entity.from(node, offset = 1), "Missing spacing after \"${node.text}\"")) withAutoCorrect { node.rawInsertAfterMe(PsiWhiteSpaceImpl(" ")) } } }
NoElseInWhenExpression - [procedure] - Line/Column=(32,4) - Path=detekt-rules/src/main/kotlin/io/gitlab/arturbosch/detekt/rules/formatting/SpacingAroundColon.kt - Signature=SpacingAroundColon.kt$SpacingAroundColon$when { missingSpacingBefore && missingSpacingAfter -> { addFindings(CodeSmell(id, Entity.from(node), "Missing spacing around \":\"")) withAutoCorrect { node.rawInsertBeforeMe(PsiWhiteSpaceImpl(" ")) node.rawInsertAfterMe(PsiWhiteSpaceImpl(" ")) } } missingSpacingBefore -> { addFindings(CodeSmell(id, Entity.from(node), "Missing spacing before \":\"")) withAutoCorrect { node.rawInsertBeforeMe(PsiWhiteSpaceImpl(" ")) } } missingSpacingAfter -> { addFindings(CodeSmell(id, Entity.from(node, offset = 1), "Missing spacing after \":\"")) withAutoCorrect { node.rawInsertAfterMe(PsiWhiteSpaceImpl(" ")) } } }
NoElseInWhenExpression - [procedure] - Line/Column=(63,4) - Path=detekt-rules/src/main/kotlin/io/gitlab/arturbosch/detekt/rules/formatting/SpacingAroundOperator.kt - Signature=SpacingAroundOperator.kt$SpacingAroundOperator$when { !spacingBefore && !spacingAfter -> { addFindings(CodeSmell(id, Entity.from(node), "Missing spacing around \":\"")) withAutoCorrect { node.rawInsertBeforeMe(PsiWhiteSpaceImpl(" ")) node.rawInsertAfterMe(PsiWhiteSpaceImpl(" ")) } } !spacingBefore -> { addFindings(CodeSmell(id, Entity.from(node), "Missing spacing before \":\"")) withAutoCorrect { node.rawInsertBeforeMe(PsiWhiteSpaceImpl(" ")) } } !spacingAfter -> { addFindings(CodeSmell(id, Entity.from(node, offset = 1), "Missing spacing after \":\"")) withAutoCorrect { node.rawInsertAfterMe(PsiWhiteSpaceImpl(" ")) } } }
NamingConventionViolation - [TooManyFunctions2] - Line/Column=(11,1) - Path=detekt-sample-ruleset/src/main/kotlin/io/gitlab/arturbosch/detekt/sampleruleset/TooManyFunctions2.kt - Signature=TooManyFunctions2.kt$TooManyFunctions2 : Rule